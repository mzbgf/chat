// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: event.sql

package sqlc_queries

import (
	"context"

	"github.com/tabbed/pqtype"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO event (user_id, event_type, metadata)
VALUES ($1, $2, $3)
RETURNING event_id, user_id, event_type, created_at, metadata
`

type CreateEventParams struct {
	UserID    int32
	EventType string
	Metadata  pqtype.NullRawMessage
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent, arg.UserID, arg.EventType, arg.Metadata)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.UserID,
		&i.EventType,
		&i.CreatedAt,
		&i.Metadata,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM event WHERE event_id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, eventID int32) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, eventID)
	return err
}

const eventByID = `-- name: EventByID :one
SELECT event_id, user_id, event_type, created_at, metadata FROM event WHERE event_id = $1
`

func (q *Queries) EventByID(ctx context.Context, eventID int32) (Event, error) {
	row := q.db.QueryRowContext(ctx, eventByID, eventID)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.UserID,
		&i.EventType,
		&i.CreatedAt,
		&i.Metadata,
	)
	return i, err
}

const eventByUserID = `-- name: EventByUserID :many
SELECT event_id, user_id, event_type, created_at, metadata FROM event WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) EventByUserID(ctx context.Context, userID int32) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, eventByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.UserID,
			&i.EventType,
			&i.CreatedAt,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEvents = `-- name: ListEvents :many
SELECT event_id, user_id, event_type, created_at, metadata FROM event ORDER BY created_at DESC
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.EventID,
			&i.UserID,
			&i.EventType,
			&i.CreatedAt,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE event SET user_id = $2, event_type = $3, metadata = $4
WHERE event_id = $1
RETURNING event_id, user_id, event_type, created_at, metadata
`

type UpdateEventParams struct {
	EventID   int32
	UserID    int32
	EventType string
	Metadata  pqtype.NullRawMessage
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, updateEvent,
		arg.EventID,
		arg.UserID,
		arg.EventType,
		arg.Metadata,
	)
	var i Event
	err := row.Scan(
		&i.EventID,
		&i.UserID,
		&i.EventType,
		&i.CreatedAt,
		&i.Metadata,
	)
	return i, err
}
